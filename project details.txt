A. User Registration and Authentication
    Users can register and log in to the system. The authentication process ensures that only registered users 
    can book trains.

B. Route and Train Management
    Admin Role: Admins can manage trains, routes, paths, and boarding points. They can assign trains to specific routes.
    Route Management: Admins create routes and define the paths within each route.
    Train Assignment: Admins assign trains to routes using the route_train pivot table.

C. Booking Process
    User Input: A user provides their departure city, arrival city, and date of travel.
    Route Identification: The system finds routes that include both the departure and arrival cities.
    Available Trains: The system identifies trains assigned to the route that stop at both the departure and arrival cities.
    Booking Creation: The system creates a booking record for the user with the selected train, route, boarding point, and date/time.

D. Real-time Updates and Notifications
    The system can provide real-time updates and notifications to users regarding train schedules, delays, and booking confirmations via email or SMS.



Real-life Example
Scenario: Mr. A and Mr. B are traveling along the same route but with different departure cities.

User Registration: Mr. A and Mr. B register on the railway management system.

Route and Train Setup:

Admin creates Route 1 from Lagos to Oyo with stops at Ogun.
Paths within Route 1:
Lagos to Ogun
Ogun to Oyo
Admin assigns Train 1 and Train 2 to Route 1.
Booking Process for Mr. A:

Mr. A logs in and wants to travel from Lagos to Oyo.
Mr. A enters Lagos as the departure city and Oyo as the arrival city, and selects a date.
The system identifies Route 1 as a match.
The system finds Train 1 and Train 2 available on Route 1.
Mr. A selects Train 1.
The system creates a booking record for Mr. A on Train 1, Route 1, departing from Lagos on the selected date.
Booking Process for Mr. B:

Mr. B logs in and wants to travel from Ogun to Oyo.
Mr. B enters Ogun as the departure city and Oyo as the arrival city, and selects a date.
The system identifies Route 1 as a match.
The system finds Train 1 and Train 2 available on Route 1.
Mr. B selects Train 1.
The system creates a booking record for Mr. B on Train 1, Route 1, departing from Ogun on the selected date.









=============================================================

Key Features:

User Registration and Authentication:

Passengers can register for an account and log in to the system.
Secure authentication mechanisms ensure that only registered users can access booking functionalities.
Route and Train Management:

Administrators can define routes within the railway network, specifying the cities and stops along each route.
Each route is associated with one or more trains, indicating the schedule and stops for each train journey.
Booking System:

Passengers can search for available trains based on their desired departure and arrival cities and travel dates.
The system provides a seamless booking experience, allowing passengers to select their preferred train and seats.
Passengers receive confirmation of their bookings along with a unique booking reference number.
Dynamic Path Generation:

The system dynamically generates paths for each route based on the specified departure and arrival cities.
Paths include all intermediate stops along the route, except for the final destination city.
Efficient Boarding Point Assignment:

Passengers are assigned boarding points based on their departure city and the available stops along the route.
The system ensures that passengers cannot board the train from the final destination city of a route.
Real-time Updates and Notifications:

Passengers receive real-time updates on train schedules, delays, and cancellations.
Notifications are sent to passengers in case of any changes to their booked journeys, ensuring a smooth travel experience.






namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\Booking;
use App\Models\Route;
use App\Models\Path;
use App\Models\Train;
use App\Models\User;
use Illuminate\Support\Str;

class UserBookingController extends Controller
{
    // List all routes
    public function listRoutes()
    {
        $routes = Route::all();
        return response()->json($routes);
    }

    // Get paths associated with a route
    public function getPaths($routeId)
    {
        $paths = Path::where('route_id', $routeId)->orderBy('sequence')->get();
        return response()->json($paths);
    }

    // Helper function to calculate time
    private function calculateTime($index, $initialDepartureTime)
    {
        $travelTimePerSegment = 1; // in hours
        $totalTravelTime = ($index - 1) * $travelTimePerSegment;
        $startingTime = strtotime($initialDepartureTime);
        $calculatedTime = date('H:i', $startingTime + $totalTravelTime * 3600);

        return $calculatedTime;
    }

    // Common logic for calculating departure and arrival times and checking seat availability
    private function getDepartureAndArrivalDetails($routeId, $departureCityId, $arrivalCityId, $travelDate)
    {
        $route = Route::findOrFail($routeId);
        $trains = $route->trains;

        if ($trains->isEmpty()) {
            throw new \Exception('No trains available for the selected route.');
        }

        $departurePath = Path::where('route_id', $routeId)->where('id', $departureCityId)->first();
        $arrivalPath = Path::where('route_id', $routeId)->where('id', $arrivalCityId)->first();

        if (!$departurePath || !$arrivalPath) {
            throw new \Exception('Invalid departure or arrival city selection for the chosen route.');
        }

        if ($departurePath->sequence >= $arrivalPath->sequence) {
            throw new \Exception('Departure city must precede arrival city.');
        }

        foreach ($trains as $train) {
            $existingBookings = Booking::where('train_id', $train->id)
                ->where('travel_date', $travelDate)
                ->count();

            if ($existingBookings < $train->capacity) {
                $departureTime = $this->calculateTime($departurePath->sequence, $train->initial_departure_time);
                $arrivalTime = $this->calculateTime($arrivalPath->sequence, $train->initial_departure_time);

                return [
                    'route_name' => $route->name,
                    'train' => $train,
                    'departure_city' => $departurePath->city,
                    'arrival_city' => $arrivalPath->city,
                    'departure_time' => $departureTime,
                    'arrival_time' => $arrivalTime
                ];
            }
        }

        throw new \Exception('No seats available on any trains for the selected route on the given travel date.');
    }

    // Calculate departure and arrival times
    public function calculateDepartureAndArrivalTime(Request $request)
    {
        $request->validate([
            'route_id' => 'required|exists:routes,id',
            'departure_city_id' => 'required|exists:paths,id',
            'arrival_city_id' => 'required|exists:paths,id',
            'travel_date' => 'required|date',
        ]);

        try {
            $details = $this->getDepartureAndArrivalDetails(
                $request->input('route_id'),
                $request->input('departure_city_id'),
                $request->input('arrival_city_id'),
                $request->input('travel_date')
            );

            return response()->json([
                'departure_city' => $details['departure_city'],
                'arrival_city' => $details['arrival_city'],
                'departure_and_arrival_time' => $details['departure_time'] . ' - ' . $details['arrival_time']
            ]);
        } catch (\Exception $e) {
            return response()->json(['error' => $e->getMessage()], 400);
        }
    }

    // Generate seat number
    private function generateSeatNumber($trainId, $travelDate)
    {
        $existingBookings = Booking::where('train_id', $trainId)
            ->where('travel_date', $travelDate)
            ->count();

        return 'S' . ($existingBookings + 1);
    }

    // Generate ticket number
    private function generateTicketNumber()
    {
        return strtoupper(Str::random(8));
    }

    // Book a train
    public function bookTrain(Request $request)
    {
        $request->validate([
            'user_id' => 'required|exists:users,id',
            'route_id' => 'required|exists:routes,id',
            'departure_city_id' => 'required|exists:paths,id',
            'arrival_city_id' => 'required|exists:paths,id',
            'travel_date' => 'required|date',
        ]);

        try {
            $details = $this->getDepartureAndArrivalDetails(
                $request->input('route_id'),
                $request->input('departure_city_id'),
                $request->input('arrival_city_id'),
                $request->input('travel_date')
            );

            $seatNumber = $this->generateSeatNumber($details['train']->id, $request->input('travel_date'));
            $ticketNumber = $this->generateTicketNumber();

            $booking = Booking::create([
                'user_id' => $request->input('user_id'),
                'train_id' => $details['train']->id,
                'departure_city' => $details['departure_city'],
                'arrival_city' => $details['arrival_city'],
                'travel_date' => $request->input('travel_date'),
                'departure_time' => $details['departure_time'],
                'arrival_time' => $details['arrival_time'],
                'seat_number' => $seatNumber,
                'ticket_number' => $ticketNumber,
            ]);

            $user = User::findOrFail($request->input('user_id'));

            return response()->json([
                'user' => [
                    'first_name' => $user->first_name,
                    'last_name' => $user->last_name,
                ],
                'route_name' => $details['route_name'],
                'train' => $details['train'],
                'departure_city' => $details['departure_city'],
                'arrival_city' => $details['arrival_city'],
                'travel_date' => $request->input('travel_date'),
                'departure_time' => $details['departure_time'],
                'arrival_time' => $details['arrival_time'],
                'seat_number' => $seatNumber,
                'ticket_number' => $ticketNumber,
            ]);
        } catch (\Exception $e) {
            return response()->json(['error' => $e->getMessage()], 400);
        }
    }
}
